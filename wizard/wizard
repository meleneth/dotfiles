#!/usr/bin/env ruby

# W.I.Z.A.R.D.

require 'pathname'

$LOAD_PATH << "#{Pathname.new(File.expand_path(__FILE__)).realpath.dirname}"

require 'lib/function'
require 'lib/class'
require 'lib/file'
require 'lib/project'

def create_project(project_name)
  project = WizardProject.new(project_name)

#  project_class = WizardClass.new(project_name)
#  project.classes << project_class

  makefile_am = WizardMakefile.new "Makefile.am"
  project.files << makefile_am

  makefile_am.key_order << "ACLOCAL_AMFLAGS"
  makefile_am.key_values["ACLOCAL_AMFLAGS"] = "-I m4"

  project.makefile = makefile_am

  return project
end

def add_executable(project, executable_name)

  if not project.makefile.key_values.has_key? "bin_PROGRAMS" then
    project.makefile.key_order.unshift 'bin_PROGRAMS'
    project.makefile.key_values['bin_PROGRAMS'] = "bin/#{executable_name}"
  else
    project.makefile.key_values['bin_PROGRAMS'] = "#{project.makefile.key_values['bin_PROGRAMS']} bin/#{executable_name}"
  end

  project.makefile.key_order << "bin_#{executable_name}_SOURCES"
  project.makefile.key_values["bin_#{executable_name}_SOURCES"] = "src/#{executable_name}.cpp"

  main_file = WizardSourceFile.new "src/#{executable_name}.cpp"

  main = WizardFunction.new('int', 'main', 'int argc, char *argv[]')
  main.body << "cout << \"#{ project.project_name }: #{executable_name}\\n\";"
  main.body << "return 0;"

  main_file.functions << main
  main_file.includes << "#include <iostream>"
  main_file.includes << "using namespace std;"

  project.files << main_file
  
end

#guinea = create_project('guinea')
#guinea.generate

#ralph = WizardClass.new('Ralph')
#
#puts ralph.as_header
#puts
#puts ralph.as_body

ARGV[0] = 'help' if ARGV.count == 0

if ARGV[0] == "help" then
  puts <<EOF
wizard project guinea guineat
cd guinea/src

#  make some classes.  First word after class is magic, if it is the name of an executable or
# library it is linked with that file.  Otherwise, links to the first program.
wizard class shape
wizard class triangle:shape
wizard class rectangle:shape

# convert build to library based.  First argument is new library name, after that are class names.
# at the end are a list of targets that will link with the new library.
# if the individual file used to be in the list for a given target, it will be removed and
# the library will be added to that executable.
wizard library geometry shape triangle rectangle guinea guineat

EOF
  exit
end

command = ARGV.shift
if command == "project" then
  ARGV[0] = 'help' if ARGV.count == 0

  if ARGV[0] == "help" then
    puts <<EOT
wizard project pyro pyrot

  Will create a new project named 'pyro' with executables 'pyro' and 'pyrot'
EOT
  exit
  end

  project_name = ARGV.shift
  other_executables = ARGV

  puts "Creating project #{project_name}"
  puts "Additional executables: #{other_executables.join(', ')}" unless other_executables.empty?

  if File.directory? project_name then
    puts "Aborting: directory #{project_name} already exists"
    exit
  end

  project = create_project(project_name)
  add_executable(project, project_name)
  other_executables.each {|x| add_executable(project, x) } 

  project.generate

end

